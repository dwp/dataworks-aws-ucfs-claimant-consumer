meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_13_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))
          TF_VAR_ucfs_claimant_kafka_consumer_version: ((ucfs_claimant_kafka_consumer_version))

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              sed -i '/^assume_role/ d' terraform.tfvars
              cp terraform.tf ../terraform-bootstrap
              cp terraform.tfvars ../terraform-bootstrap
          dir: dataworks-aws-ucfs-claimant-consumer
        inputs:
          - name: dataworks-aws-ucfs-claimant-consumer
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              cp ../terraform-bootstrap/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-ucfs-claimant-consumer
        inputs:
          - name: dataworks-aws-ucfs-claimant-consumer
          - name: terraform-bootstrap

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              cp ../terraform-bootstrap/terraform.tfvars .
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-ucfs-claimant-consumer
        inputs:
          - name: dataworks-aws-ucfs-claimant-consumer
          - name: terraform-bootstrap
      params:
        DETAILED_EXITCODE: -detailed-exitcode

    terraform-output-ucfs-claimant:
      task: terraform-output-ucfs-claimant
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_13_version))
            tag: ((dataworks.terraform_13_version))
        run:
          path: sh
          args:
            - -exc
            - |
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-ucfs-claimant/outputs.json
          dir: ucfs-claimant
        inputs:
          - name: ucfs-claimant
        outputs:
          - name: terraform-output-ucfs-claimant

    rotate-ucfs-claimant-api-kafka-consumer-password:
      task: rotate-ucfs-claimant-api-kafka-consumer-password
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          USERNAME: claimant-api-kafka-consumer
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x

              export PARAM_NAME=`cat terraform-output-ucfs-claimant/outputs.json | jq -r ".claimant_api_kafka_consumer_rds_user_sercret.value.name"`
              echo "PARAM_NAME is: '$PARAM_NAME'"

              jq -n --arg Username "$USERNAME" --arg Paramname "$PARAM_NAME" '{mysql_user_username: $Username, mysql_user_password_secret_name: $Paramname}' > manifest.json
              echo "Manifest is:"
              cat manifest.json
              aws lambda invoke --function-name manage-claimant-api-mysql-user --invocation-type RequestResponse --payload file://manifest.json --cli-connect-timeout 600 --cli-read-timeout 600 output.json
              cat output.json | jq -eC "if .errorMessage? then error(.errorMessage) else true end"
        inputs:
          - name: terraform-output-ucfs-claimant

