jobs:
  - name: rotate-mysql-password-api-kafka-consumer-development
    plan:
      - get: ucfs-claimant
      - .: (( inject meta.plan.terraform-output-ucfs-claimant ))
        config:
          params:
            TF_WORKSPACE: "default"
      - .: (( inject meta.plan.rotate-ucfs-claimant-api-kafka-consumer-password ))
        config:
          params:
            AWS_ACC: ((aws_account.development))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci

  - name: rotate-mysql-password-api-kafka-consumer-qa
    plan:
      - get: ucfs-claimant
      - .: (( inject meta.plan.terraform-output-ucfs-claimant ))
        config:
          params:
            TF_WORKSPACE: "qa"
      - .: (( inject meta.plan.rotate-ucfs-claimant-api-kafka-consumer-password ))
        config:
          params:
            AWS_ACC: ((aws_account.qa))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.qa)):role/ci

  - name: rotate-mysql-password-api-kafka-consumer-integration
    plan:
      - get: ucfs-claimant
      - .: (( inject meta.plan.terraform-output-ucfs-claimant ))
        config:
          params:
            TF_WORKSPACE: "integration"
      - .: (( inject meta.plan.rotate-ucfs-claimant-api-kafka-consumer-password ))
        config:
          params:
            AWS_ACC: ((aws_account.integration))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.integration)):role/ci

  - name: rotate-mysql-password-api-kafka-consumer-preprod
    plan:
      - get: ucfs-claimant
      - .: (( inject meta.plan.terraform-output-ucfs-claimant ))
        config:
          params:
            TF_WORKSPACE: "preprod"
      - .: (( inject meta.plan.rotate-ucfs-claimant-api-kafka-consumer-password ))
        config:
          params:
            AWS_ACC: ((aws_account.preprod))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.preprod)):role/ci

  - name: rotate-mysql-password-api-kafka-consumer-production
    plan:
      - get: ucfs-claimant
      - .: (( inject meta.plan.terraform-output-ucfs-claimant ))
        config:
          params:
            TF_WORKSPACE: "production"
      - .: (( inject meta.plan.rotate-ucfs-claimant-api-kafka-consumer-password ))
        config:
          params:
            AWS_ACC: ((aws_account.production))
            AWS_ROLE_ARN: arn:aws:iam::((aws_account.production)):role/ci

